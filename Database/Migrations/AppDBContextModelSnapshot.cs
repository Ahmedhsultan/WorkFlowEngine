// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Database.Migrations
{
    [DbContext(typeof(AppDBContext))]
    partial class AppDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Database.Models.Digrams", b =>
                {
                    b.Property<Guid>("digramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("digramName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("digramId");

                    b.ToTable("digrams");
                });

            modelBuilder.Entity("Database.Models.Processes", b =>
                {
                    b.Property<Guid>("processId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("digramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("end")
                        .HasColumnType("bit");

                    b.Property<Guid>("formId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("nextProcessIdNo1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("nextProcessIdNo2")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("scriptId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("start")
                        .HasColumnType("bit");

                    b.HasKey("processId");

                    b.HasIndex("digramId");

                    b.ToTable("processes");
                });

            modelBuilder.Entity("Database.Models.Requests", b =>
                {
                    b.Property<Guid>("requsetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("startProcessesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("userId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("requsetId");

                    b.HasIndex("startProcessesId")
                        .IsUnique();

                    b.HasIndex("userId");

                    b.ToTable("requests");
                });

            modelBuilder.Entity("Database.Models.User", b =>
                {
                    b.Property<Guid>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProcessesprocessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("createdOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("gender")
                        .HasColumnType("int");

                    b.Property<byte[]>("passwordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("passwordSult")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("role")
                        .HasColumnType("int");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("userId");

                    b.HasIndex("ProcessesprocessId");

                    b.ToTable("user");
                });

            modelBuilder.Entity("DigramsUser", b =>
                {
                    b.Property<Guid>("digramsdigramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("outhUseruserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("digramsdigramId", "outhUseruserId");

                    b.HasIndex("outhUseruserId");

                    b.ToTable("DigramsUser");
                });

            modelBuilder.Entity("Database.Models.Processes", b =>
                {
                    b.HasOne("Database.Models.Digrams", "digram")
                        .WithMany("processes")
                        .HasForeignKey("digramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("digram");
                });

            modelBuilder.Entity("Database.Models.Requests", b =>
                {
                    b.HasOne("Database.Models.Processes", "startProcesses")
                        .WithOne("request")
                        .HasForeignKey("Database.Models.Requests", "startProcessesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Models.User", "user")
                        .WithMany("requests")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("startProcesses");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Database.Models.User", b =>
                {
                    b.HasOne("Database.Models.Processes", null)
                        .WithMany("outhUser")
                        .HasForeignKey("ProcessesprocessId");
                });

            modelBuilder.Entity("DigramsUser", b =>
                {
                    b.HasOne("Database.Models.Digrams", null)
                        .WithMany()
                        .HasForeignKey("digramsdigramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Models.User", null)
                        .WithMany()
                        .HasForeignKey("outhUseruserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Database.Models.Digrams", b =>
                {
                    b.Navigation("processes");
                });

            modelBuilder.Entity("Database.Models.Processes", b =>
                {
                    b.Navigation("outhUser");

                    b.Navigation("request")
                        .IsRequired();
                });

            modelBuilder.Entity("Database.Models.User", b =>
                {
                    b.Navigation("requests");
                });
#pragma warning restore 612, 618
        }
    }
}
